@using Armadillo.Graph
@using Microsoft.JSInterop
@using System.Threading.Tasks
@using Armadillo.Shared
@using System.Linq
@using System.Collections.Generic
@inject IJSRuntime JsRuntime;

<div id="network-wrapper"/>

@code {
    [Parameter]
    public Product Product { get; set; }
   
    [Parameter]
    public bool ShowCustomers { get; set; }
    
    [Parameter]
    public bool ShowOwners { get; set; }

    private async Task RenderNetworkAsync(Network network)
    {
        await JsRuntime.InvokeAsync<string>("RenderNetwork", network);
    } 

    private string TruncateString(string value, int maxChars)
    {
        return value.Length <= maxChars ? value : value.Substring(0, maxChars) + "...";
    }

    private string GetTitle(Subcase subcase)
    {
        return
            $"<b>{subcase.Id}</b><br>" + 
            $"Level: {subcase.Level}<br>" + 
            $"Status: {subcase.Status}<br>" + 
            $"Customer: {subcase.Customer}<br>" + 
            $"Owner: {subcase.Owner}<br>" + 
            $"Created: {subcase.Created}<br>" + 
            $"Last update {subcase.LastUpdate}<br>" + 
            $"Refreshed at: {subcase.Loaded} UTC<br>" + 
            $"{subcase.Title}<br><br>" + 
            "Double-click the subcase circle for more details.";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(Product == null)
        {
            await RenderNetworkAsync(new Network());
            return;
        }

        var subcases = Product.Subcases;
        var nodes = new List<Node>();
        
        foreach(var each in subcases) 
        {
            var node =  new Node(each.Id, each.Id)
            {
                Title = GetTitle(each),
                Value = Math.Max(5, (int)((DateTime.UtcNow - each.Created).TotalDays) / 6)
            };

            node.Color = new NodeColor(each);
            node.BorderWidth = String.IsNullOrEmpty(node.Color.Border) ? 0 : 5;
            nodes.Add(node);
        }
        
        var edges = new List<Edge>();
        if(ShowCustomers)
        {
            var customers = subcases.GroupBy(each => each.Customer,
                each => each, 
                (key, group) => new { Customer = key, Subcases = group});
            foreach (var item in customers)
            {
                nodes.Add(new Node(item.Customer, TruncateString(item.Customer, 15), "customers")
                {
                    Title = item.Customer
                });
                foreach (var subcase in item.Subcases)
                {
                    edges.Add(new Edge(item.Customer, subcase.Id));
                }
            }
        }

        if(ShowOwners)
        {
            var owners = subcases.GroupBy(each => each.Owner, 
                each => each, 
                (key, group) => new { Owner = key, Subcases = group});
            foreach (var item in owners)
            {
                nodes.Add(new Node(item.Owner, item.Owner, "owners")
                {
                    Title = item.Owner
                });
                foreach (var subcase in item.Subcases)
                {
                    edges.Add(new Edge(item.Owner, subcase.Id));
                }
            }
        }

        var network = new Network()
        {
            Nodes = nodes.ToArray(),
            Edges = edges.ToArray()
        };

        await RenderNetworkAsync(network);
    }
}
