@using Armadillo.Graph
@using Microsoft.JSInterop
@using System.Threading.Tasks
@using Armadillo.Shared
@using System.Linq
@using System.Collections.Generic
@inject IJSRuntime JsRuntime;

<div id="status-statistics-container" class="statistics-container"/>

@code {
    [Parameter]
    public Product Product { get; set; }
   
    private async Task RenderStatisticsAsync(IEnumerable<StatusStatisticsSlice> slices)
    {
        await JsRuntime.InvokeAsync<string>("RenderStatusStatistics", slices);
    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(Product == null || !Product.Subcases.Any())
        {
            await RenderStatisticsAsync(new StatusStatisticsSlice[]{});
            return;
        }

        var statuses = Product.Subcases
            .Select(each => new NodeColor(each))
            .Where(each => !String.IsNullOrEmpty(each.Importance))
            .GroupBy(each => (each.Importance, each.Border),
            each => each, 
            (key, group) => new { Key = key, Subcases = group});
            
        var slices = new List<StatusStatisticsSlice>();
        foreach (var item in statuses)
        {
            slices.Add(new StatusStatisticsSlice(item.Key.Importance, item.Key.Border, item.Subcases.Count()));
        }
       
        await RenderStatisticsAsync(slices.ToArray());
    }
}
