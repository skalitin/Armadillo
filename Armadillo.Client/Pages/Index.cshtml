@page "/"
@inject HttpClient Http

@using Armadillo.Chart
@using Armadillo.Shared
@using System.Collections.Generic
@using System.Threading.Tasks
@using System.Timers
@using Microsoft.AspNetCore.WebUtilities

<div class="settings">
<div class="select-wrapper">
    <select bind="@ProductName">
        @foreach (var item in ProductNames)
        {
            <option value="@item">@item</option>
        }
    </select>
</div>

<label class="checkbox-container" for="show-customers">Show customers
    <input type="checkbox" bind="@ShowCustomers" id="show-customers"/>
    <span class="checkmark"></span>
</label>

<label class="checkbox-container" for="show-owners">Show owners
    <input type="checkbox" bind="@ShowOwners" id="show-owners"/>
    <span class="checkmark"></span>
</label>

<label class="checkbox-container" for="show-graph">Graph
    <input type="checkbox" bind="@ShowGraph" id="show-graph"/>
    <span class="checkmark"></span>
</label>

<label class="checkbox-container" for="autorefresh">Auto refresh every @(timer_.Interval/60000) min.
    <input type="checkbox" bind="@Autorefresh" id="autorefresh"/>
    <span class="checkmark"></span>
</label>

@if (ProductSubcases != null)
{
    <a target="_blank" href="@ProductSubcases.ReportLink" class="report-link">Detailed report</a>
}
</div>

<div class="content">
@if (ProductSubcases == null)
{
    <h1>Loading...</h1>
}
else
{
    if(!String.IsNullOrEmpty(ProductSubcases.Error))
    {
        <p>Error loading subcases: @ProductSubcases.Error</p>
    }
    else
    {
        <h2>@ProductSubcases.Subcases.Length subcases for @ProductSubcases.Name</h2>
        <div class="subcase-content">
            @if(ShowGraph)
            {
                <SubcaseGraph Product=@ProductSubcases ShowCustomers=@ShowCustomers ShowOwners=@ShowOwners/>
            }
            else
            {
                <SubcaseList Product=@ProductSubcases ShowCustomers=@ShowCustomers ShowOwners=@ShowOwners/>
            }
        </div>
    }
}
</div>

@functions {
    private Timer timer_ = new Timer(1000 * 60 * 30);
    private IEnumerable<string> ProductNames { get; set; } = new string[]{};
    
    private string productName_;
    private string ProductName
    { 
        get
        {  
             return productName_;
        }
        set
        {
            productName_ = value;
            ReloadSubcases();
        }
    }

    private bool autorefresh_ = true;
    private bool Autorefresh
    { 
        get
        {  
             return autorefresh_;
        }
        set
        {
            autorefresh_ = value;
            timer_.Enabled = autorefresh_;
        }
    }

    private bool ShowGraph { get; set; } = true;
    private bool ShowCustomers { get; set; } = true;
    private bool ShowOwners { get; set; } = true;
    private Product ProductSubcases { get; set; }

    protected override async Task OnInitAsync()
    {
        ProductNames = await Http.GetJsonAsync<IEnumerable<string>>("api/products");
        ProductName = ProductNames.FirstOrDefault();
        
        timer_.Elapsed += (sender, e) => ReloadSubcases();
        timer_.Enabled = Autorefresh;
    }

    private void ReloadSubcases()
    {
        ProductSubcases = null;
        Task.Run(async () => {
            var url = QueryHelpers.AddQueryString("api/subcases", "product", ProductName);
            ProductSubcases = await Http.GetJsonAsync<Product>(url);
            StateHasChanged();
        });
    }
}
