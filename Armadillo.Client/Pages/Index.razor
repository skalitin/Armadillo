@page "/"
@page "/{ProductNameParameter}"

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using Armadillo.Graph
@using Armadillo.Shared
@using System.Collections.Generic
@using System.Threading.Tasks
@using System.Timers
@using Microsoft.AspNetCore.WebUtilities

<div class="sidebar">
    <div class="settings">
        <div class="select-wrapper">
            <select @bind="@ProductName">
                @foreach (var item in ProductNames)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
        <label class="checkbox-container" for="show-customers">Show customers
            <input type="checkbox" @bind="@ShowCustomers" id="show-customers"/>
            <span class="checkmark"></span>
        </label>
        <label class="checkbox-container" for="show-owners">Show owners
            <input type="checkbox" @bind="@ShowOwners" id="show-owners"/>
            <span class="checkmark"></span>
        </label>
        <label class="checkbox-container" for="show-graph">Graph
            <input type="checkbox" @bind="@ShowGraph" id="show-graph"/>
            <span class="checkmark"></span>
        </label>
    </div>

    <div class="statistics-wrapper-1">
        <LevelStatistics Product=@ProductSubcases/>
    </div>

    <div class="statistics-wrapper-2">
        <StatusStatistics Product=@ProductSubcases/>
    </div>
</div>

<div class="content">
@if (!ProductNames.Any())
{
    <h4>Loading products...</h4>
}
else if (ProductSubcases == null)
{
    <h4>Loading subcases...</h4>
}
else
{
    if(!String.IsNullOrEmpty(ProductSubcases.Error))
    {
        <p>Error loading subcases: @ProductSubcases.Error</p>
    }
    else
    {
        <div class="subcase-content">
            @if(ShowGraph)
            {
                <SubcaseGraph Product=@ProductSubcases ShowCustomers=@ShowCustomers ShowOwners=@ShowOwners/>
            }
            else
            {
                if (ProductSubcases != null)
                {
                    <a target="_blank" href="@ProductSubcases.ReportLink" class="report-link">Data Source</a>
                }
                <SubcaseList Product=@ProductSubcases ShowCustomers=@ShowCustomers ShowOwners=@ShowOwners/>
            }
        </div>
    }
}
</div>

@code {
    private Timer timer_ = new Timer(1000 * 60 * 30);
    private IList<string> ProductNames { get; set; } = new List<string>();
    
    private string productName_;
    private string ProductName
    { 
        get
        {  
            return productName_;
        }
        set
        {
            if(productName_ != value)
            {
                productName_ = value;
                NavigationManager.NavigateTo($"/{ProductName}");
            }
        }
    }

    [Parameter]
    public string ProductNameParameter
    { 
        set
        {
            if(!String.IsNullOrEmpty(value))
            {
                if(!ProductNames.Any())
                {
                    ProductNames.Add(value);
                }

                ProductName = value;
                ReloadSubcases();
            }
        }
    }

    private bool ShowGraph { get; set; } = true;
    private bool ShowCustomers { get; set; } = true;
    private bool ShowOwners { get; set; } = true;
    private Product ProductSubcases { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var products = await Http.GetJsonAsync<IEnumerable<string>>("api/products");
        foreach(var product in products)    
        {
            if(product != ProductName)
            {
                ProductNames.Add(product);
            }
        }

        ProductName = String.IsNullOrEmpty(ProductName) ? ProductNames.FirstOrDefault() : ProductName;
        
        timer_.Elapsed += (sender, e) => ReloadSubcases();
        timer_.Enabled = true;
    }

    private void ReloadSubcases()
    {
        ProductSubcases = null;
        Task.Run(async () => {
            var url = QueryHelpers.AddQueryString("api/subcases", "product", ProductName);
            ProductSubcases = await Http.GetJsonAsync<Product>(url);
            StateHasChanged();
        });
    }
}
